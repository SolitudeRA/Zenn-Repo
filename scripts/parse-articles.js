const fs = require('fs-extra');
const path = require('path');
const crypto = require('crypto');
const matter = require('gray-matter');

// „ÇΩ„Éº„Çπ„Éá„Ç£„É¨„ÇØ„Éà„É™„Å®„Çø„Éº„Ç≤„ÉÉ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂÆöÁæ©
const sourceDir = path.join(__dirname, '../pre-publish');
const targetDir = path.join(__dirname, '../articles');

// „Çø„Éº„Ç≤„ÉÉ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
if (!fs.existsSync(targetDir)) {
    fs.mkdirSync(targetDir, { recursive: true });
}

// ÂîØ‰∏Ä„ÅÆ„Éï„Ç°„Ç§„É´Âêç„ÇíÁîüÊàê
const generateUniqueFileName = (existingFiles) => {
    let fileName;
    do {
        fileName = crypto.randomBytes(16).toString('hex'); // 32ÊñáÂ≠ó„ÅÆ„É©„É≥„ÉÄ„É†„Å™ÊñáÂ≠óÂàó
    } while (existingFiles.includes(`${fileName}.md`)); // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
    return fileName;
};

// „Åô„Åß„Å´Â≠òÂú®„Åô„ÇãË®ò‰∫ã„ÅÆ„Çø„Ç§„Éà„É´„Å®„Éï„Ç°„Ç§„É´ÊÉÖÂ†±„ÇíÂèéÈõÜ
const existingArticles = fs.readdirSync(targetDir)
    .filter((file) => file.endsWith('.md'))
    .map((file) => {
        const filePath = path.join(targetDir, file);
        const content = fs.readFileSync(filePath, 'utf-8');
        const { data } = matter(content);
        return { title: data.title, fileName: file };
    });

// `pre-publish` „Éï„Ç©„É´„ÉÄÂÜÖ„ÅÆMarkdown„Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜ
fs.readdirSync(sourceDir).forEach((file) => {
    const sourceFilePath = path.join(sourceDir, file);

    if (path.extname(file) === '.md') {
        const sourceContent = fs.readFileSync(sourceFilePath, 'utf-8');
        const { data: sourceData, content: sourceBody } = matter(sourceContent);

        // `title` „ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
        if (!sourceData.title) {
            console.error(`„Ç®„É©„Éº: ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ (title) „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${file}„ÄÇ„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô...`);
            return;
        }

        // Êó¢Â≠ò„ÅÆË®ò‰∫ã„ÇíÁ¢∫Ë™ç
        const existingArticle = existingArticles.find((article) => article.title === sourceData.title);

        if (existingArticle) {
            // Êó¢Â≠ò„Éï„Ç°„Ç§„É´„ÇíÊõ¥Êñ∞
            const targetFilePath = path.join(targetDir, existingArticle.fileName);
            console.log(`Êó¢Â≠ò„ÅÆË®ò‰∫ã„ÇíÊõ¥Êñ∞‰∏≠: ${sourceData.title}`);

            const targetContent = fs.readFileSync(targetFilePath, 'utf-8');
            const { data: targetData } = matter(targetContent);

            // ÂÜÖÂÆπ„ÇíÊõ¥Êñ∞ÔºàÊó¢Â≠ò„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÇíÊâãÂä®ÁîüÊàêÔºâ
            const frontMatter = `---\n` +
                `title: "${targetData.title}"\n` +
                `emoji: "${targetData.emoji}"\n` +
                `type: "${targetData.type}"\n` +
                `topics:\n${targetData.topics.map((topic) => `  - "${topic}"`).join('\n')}\n` +
                `published: ${targetData.published}\n` +
                (targetData.published_at ? `published_at: "${targetData.published_at}"\n` : '') +
                `---`;

            const updatedContent = `${frontMatter}\n\n${sourceBody}`;
            fs.writeFileSync(targetFilePath, updatedContent, 'utf-8');
            console.log(`Êõ¥Êñ∞„Åó„Åæ„Åó„Åü: ${targetFilePath}`);
        } else {
            // Êñ∞„Åó„ÅÑË®ò‰∫ã„Çí‰ΩúÊàê
            const uniqueFileName = generateUniqueFileName(existingArticles.map((article) => article.fileName));
            const targetFilePath = path.join(targetDir, `${uniqueFileName}.md`);

            const metadata = {
                title: sourceData.title,
                emoji: sourceData.emoji || 'üìÑ',
                type: sourceData.type || 'tech',
                topics: sourceData.topics || ['default'],
                published: sourceData.published !== undefined ? sourceData.published : true,
            };

            const frontMatter = `---\n` +
                `title: "${metadata.title}"\n` +
                `emoji: "${metadata.emoji}"\n` +
                `type: "${metadata.type}"\n` +
                `topics:\n${metadata.topics.map((topic) => `  - "${topic}"`).join('\n')}\n` +
                `published: ${metadata.published}\n` +
                `---`;

            const updatedContent = `${frontMatter}\n\n${sourceBody}`;
            fs.writeFileSync(targetFilePath, updatedContent, 'utf-8');
            console.log(`Êñ∞Ë¶è‰ΩúÊàê: ${targetFilePath}`);
        }
    }
});